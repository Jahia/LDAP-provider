Jahia LDAP Connector

* Overview

  This module provides LDAP provider implementations for user and user groups.
  From version 6.5 up Jahia supports multiple LDAP providers to be used simultaneously
  to achieve better flexibility and data aggregation. 
  
* Registering LDAP providers

  The following steps show how to enable and configure the user and user group LDAP providers
  declaring them in a custom Jahia module.
  
  [[1]] Create the following folder structure for your module:
  
+------------------------------------------------
  META-INF
     | + spring
     |     | - users-ldap.xml
     |     | - groups-ldap.xml
     | - MANIFEST.MF
+------------------------------------------------
   
  [[2]]  The content of the <<<MANIFEST.MF>>> file should include three mandatory attributes:
  
+------------------------------------------------
  ...
  depends: Jahia LDAP connector
  package-name: My Custom LDAP Provider
  root-folder: my-custom-ldap-provider
  ...
+------------------------------------------------
  
  <<<depends>>> attribute defines a dependency to the <Jahia LDAP connector> module (this module).
  
  <<<package-name>>> specifies your module ID

  <<<root-folder>>> contains the name of the folder, the content of the module will be extracted into (a sub-folder of the <<</modules>>> folder). 
  
  All other attributes in <<<MANIFEST.MF>>> file are optional.  

  [[3]] LDAP user provide configuration in <<<users-ldap.xml>>>
  
  The file contains a Spring bean definition for the user provider as follows:
  
+------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <bean parent="JahiaUserManagerLDAPProvider">
        <property name="ldapProperties">
            <map>
                <entry key="url" value="ldap://127.0.0.1:389/"/>
                <entry key="public.bind.dn" value=""/>
                <entry key="public.bind.password" value=""/>
                <entry key="uid.search.name" value="dc=jahia"/>
            </map>
        </property>
    </bean>
    
</beans>
+------------------------------------------------
  
  The bean has <<<JahiaUserManagerLDAPProvider>>> as its parent and should override
  at least the <<<ldapProperties>>> property to properly configure connector and
  LDAP attribute mapping. Default LDAP parameter values are defined in parent and
  can be overridden in the <<<ldapProperties>>> map. See {{{User} property reference}} for more details.
  
  In case multiple LDAP user providers are used, additionally two properties need to
  be provided to specify a unique provider key and a priority (lookup sequence):
  
+------------------------------------------------
...
    <bean parent="JahiaUserManagerLDAPProvider">
        <property name="key" value="myldap"/>
        <property name="priority" value="2"/>
    ...
    </bean>
...
+------------------------------------------------
  
  
  The <<<users-ldap.xml>>> file name is arbitrary and the file itself can be omitted,
  if no LDAP user provider is needed.

  [[4]] LDAP user group provide configuration in <<<groups-ldap.xml>>>
  
  The file contains a Spring bean definition for the user group provider as follows:
  
+------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <bean parent="JahiaGroupManagerLDAPProvider">
        <property name="ldapProperties">
            <map>
                <entry key="url" value="ldap://127.0.0.1:389/"/>
                <entry key="public.bind.dn" value=""/>
                <entry key="public.bind.password" value=""/>
                <entry key="search.name" value="dc=jahia"/>
            </map>
        </property>
    </bean>

</beans>
+------------------------------------------------
  
  The bean has <<<JahiaGroupManagerLDAPProvider>>> as its parent and should override
  at least the <<<ldapProperties>>> property to properly configure connector and
  LDAP attribute mapping. Default LDAP parameter values are defined in parent and
  can be overridden in the <<<ldapProperties>>> map. See {{{group} property reference}} for more details.
  
  In case multiple LDAP user group providers are used, additionally two properties need to
  be provided to specify a unique provider key and a priority (lookup sequence):
  
+------------------------------------------------
...
    <bean parent="JahiaGroupManagerLDAPProvider">
        <property name="key" value="myldap"/>
        <property name="priority" value="2"/>
    ...
    </bean>
...
+------------------------------------------------
  
  
  The <<<groups-ldap.xml>>> file name is arbitrary and the file itself can be omitted,
  if no LDAP user provider is needed.

  [[5]] Zip the content of your module into a file with <<<.war>>>, e.g. <<<my-custom-ldap-provider.war>>>
  
  [[6]] Copy the module WAR file into the <<<WEB-INF/var/shared_module>>> folder of your server (all cluster nodes)
  
  [[7]] If the module hot deployment is enabled the providers will be registered automatically.
  Otherwise a server restart is required for a module to be deployed and providers to be registered.
  
    []
    
* {User} provider properties reference

  The following LDAP properties can be specified in the <<<ldapProperties>>> map to customize the user provider configuration:
  
  [[I]] Connection and authentication parameters
  
*----------------+-------------------+------------------------------------------------+
| <<Key>>        | <<Default value>> | <<Description>>                                |
*----------------+-----------------+------------------------------------------------+
| <<<url>>>            | <<<\<none\>>>>        | The LDAP connection URL, e.g. <<<ldap://127.0.0.1:389/>>> |
*----------------+-----------------+------------------------------------------------+
| <<<public.bind.dn>>> | <<<\<none\>>>>        | This is the user on the LDAP server permitted to search the LDAP directory within the defined search base. |
*----------------+-----------------+------------------------------------------------+
| <<<public.bind.password>>> | <<<\<none\>>>>  | The password, used to authenticate searches in LDAP directory |
*----------------+-----------------+------------------------------------------------+
| <<<authentification.mode>>>  | <<<simple>>>  | LDAP directory authentication type  |
*----------------+-----------------+------------------------------------------------+
|<<<context.factory>>> | <<<com.sun.jndi.ldap.LdapCtxFactory>>> | The implementation class for context factory to use |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.timeout>>> | <<<5000>>>    | Connection timeout. When connection pooling has been enabled and no pooled connection is available, the client application will block, waiting for an available connection. Setting this timeout value will specify how long to wait for a pooled connection (in milliseconds). If you omit this property, the application will wait indefinitely. See {{{http://download.oracle.com/javase/jndi/tutorial/ldap/connect/pool.html}connection pooling}} for details. |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool>>> | <<<apache-commons>>>        | Type of pool to use : ldap, apache-commons, or none |
*----------------+-------------+------------------------------------------------+
| <<<target.site>>>    | <<<\<none\>>>>        | The site key to mount the provider on. If not specified, users and groups will be global |
*----------------+-------------+------------------------------------------------+

  Connection parameters for native {{{http://docs.oracle.com/javase/jndi/tutorial/ldap/connect/pool.html}ldap}} pool :

*----------------+-------------------+------------------------------------------------+
| <<Key>>        | <<Default value>> | <<Description>>                                |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.debug>>> |    |  A string that indicates the level of debug output to produce. Valid values are "fine" (trace connection creation and removal) and "all" (all debugging information).  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.initSize>>> |  1  |  The string representation of an integer that represents the number of connections per connection identity to create when initially creating a connection for the identity.  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.maxSize>>> |    |  The string representation of an integer that represents the maximum number of connections per connection identity that can be maintained concurrently.  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.prefSize>>> |    | The string representation of an integer that represents the preferred number of connections per connection identity that should be maintained concurrently.   |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.timeout>>> |    | The string representation of an integer that represents the number of milliseconds that an idle connection may remain in the pool without being closed and removed from the pool.   |
*----------------+-----------------+------------------------------------------------+

  Connection parameters for {{{http://docs.spring.io/spring-ldap/docs/1.3.2.RELEASE/reference/html/pooling.html}apache-commons}} pool :

*----------------+-------------------+------------------------------------------------+
| <<Key>>        | <<Default value>> | <<Description>>                                |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.maxActive>>> |  8   |  The maximum number of active connections of each type (read-only|read-write) that can be allocated from this pool at the same time, or non-positive for no limit.  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.maxTotal>>> | -1   | The overall maximum number of active connections (for all types) that can be allocated from this pool at the same time, or non-positive for no limit.   |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.maxIdle>>> |  8  |  The maximum number of active connections of each type (read-only|read-write) that can remain idle in the pool, without extra ones being released, or non-positive for no limit.  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.minIdle>>> | 0   | The minimum number of active connections of each type (read-only|read-write) that can remain idle in the pool, without extra ones being created, or zero to create none.   |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.maxWait>>> | -1   |  The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception, or non-positive to wait indefinitely.  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.whenExhaustedAction>>> |  block  |  Specifies the behaviour when the pool is exhausted. The FAIL option will throw a NoSuchElementException when the pool is exhausted. The BLOCK option will wait until a new object is available. If maxWait is positive a NoSuchElementException is thrown if no new object is available after the maxWait time expires. The GROW option will create and return a new object (essentially making maxActive meaningless).  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.testOnBorrow>>> |  false  |  The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and an attempt to borrow another will be made.  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.testOnReturn>>> |  false  |  The indication of whether objects will be validated before being returned to the pool.  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.testWhileIdle>>> | false   |  The indication of whether objects will be validated by the idle object evictor (if any). If an object fails to validate, it will be dropped from the pool.  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.timeBetweenEvictionRunsMillis>>> | -1   |  The number of milliseconds to sleep between runs of the idle object evictor thread. When non-positive, no idle object evictor thread will be run.  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.numTestsPerEvictionRun>>> | 3   |  The number of objects to examine during each run of the idle object evictor thread (if any).  |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool.minEvictableIdleTimeMillis>>> | 1000 * 60 * 30 | The minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any). |
*----------------+-----------------+------------------------------------------------+



  [[II]] Search parameters
  
*----------------+-------------------+------------------------------------------------+
| <<Key>>        | <<Default value>> | <<Description>>                                |
*----------------+-------------------+------------------------------------------------+
| <<<uid.search.name>>> | <<<\<none\>>>>           | The search base that defines which part of the LDAP directory tree to search, e.g. <<<dc=jahia,dc=com>>>. To improve performance when retrieving the members of groups it is advisable to have a different base between user and group search |
*----------------+-------------------+------------------------------------------------+
| <<<uid.search.attribute>>> | <<<cn>>>          | The name of the attribute that will be used as a user key. |
*----------------+-----------------+------------------------------------------------+
| <<<search.objectclass>>> | <<<person>>>    | The <<<objectClass>>> value for a user object |
*----------------+-----------------+------------------------------------------------+
| <<<search.wildcards.attributes>>>  | <<<ou, cn, o, c, mail, uid, uniqueIdentifier, givenName, sn, dn>>> | A list of attributes to use for wildcard searches such as <*=*test*> |
*----------------+-------------+------------------------------------------------+
| <<<search.countlimit>>> | <<<100>>>    | The number of entries to limit search results to. If the LDAP user search returns more matching entries than specified with this parameter, the first <<<search.countlimit>>> will be returned only. |
*----------------+-------------+------------------------------------------------+
| <<<search.attribute.inDn>>> | false    | If set to true, signal that the users and groups ids are contains in the dn. Useful to improve the performance when lookup the members |
*----------------+-------------+------------------------------------------------+

  [[III]] Attribute mapping parameters - defines a mapping between Jahia's <<<jnt:user>>> node properties and the corresponding LDAP object attributes.
  
*----------------+-------------------+------------------------------------------------+
| <<Key>>        | <<Default value>> | <<Description>>                                |
*----------------+-------------------+------------------------------------------------+
| <<<j:firstName.attribute.map>>> | <<<givenName>>> | First name |
*----------------+-------------------+------------------------------------------------+
| <<<j:lastName.attribute.map>>> | <<<sn>>>          | Second name |
*----------------+-----------------+------------------------------------------------+
| <<<j:email.attribute.map>>> | <<<mail>>>    | User's e-mail address |
*----------------+-----------------+------------------------------------------------+
| <<<j:organization.attribute.map>>>  | <<<ou>>> | The name of the organization |
*----------------+-------------+------------------------------------------------+

  Additional attribute mappings can be specified, using the following pattern for the entry key: "<<<\<jahia-user-property-name\>.attribute.map>>>" and the name of the corresponding LDAP object attribute as the value.
  
  []
  
* User {group} provider properties reference

  The following LDAP properties can be specified in the <<<ldapProperties>>> map to customize the group provider configuration:
  
  [[I]] Connection and authentication parameters
  
*----------------+-------------------+------------------------------------------------+
| <<Key>>        | <<Default value>> | <<Description>>                                |
*----------------+-----------------+------------------------------------------------+
| <<<url>>>            | <<<\<none\>>>>        | The LDAP connection URL, e.g. <<<ldap://127.0.0.1:389/>>> |
*----------------+-----------------+------------------------------------------------+
| <<<public.bind.dn>>> | <<<\<none\>>>>        | This is the user on the LDAP server permitted to search the LDAP directory within the defined search base. |
*----------------+-----------------+------------------------------------------------+
| <<<public.bind.password>>> | <<<\<none\>>>>  | The password, used to authenticate searches in LDAP directory |
*----------------+-----------------+------------------------------------------------+
| <<<authentification.mode>>>  | <<<simple>>>  | LDAP directory authentication type  |
*----------------+-----------------+------------------------------------------------+
|<<<context.factory>>> | <<<com.sun.jndi.ldap.LdapCtxFactory>>> | The implementation class for context factory to use |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.pool>>> | <<<true>>>        | Enables/disables {{{http://download.oracle.com/javase/jndi/tutorial/ldap/connect/pool.html}connection pooling}} |
*----------------+-----------------+------------------------------------------------+
|<<<ldap.connect.timeout>>> | <<<5000>>>    | When connection pooling has been enabled and no pooled connection is available, the client application will block, waiting for an available connection. Setting this timeout value will specify how long to wait for a pooled connection (in milliseconds). If you omit this property, the application will wait indefinitely. See {{{http://download.oracle.com/javase/jndi/tutorial/ldap/connect/pool.html}connection pooling}} for details. |
*----------------+-------------+------------------------------------------------+


  [[II]] Search and membership parameters
  
*----------------+-------------------+------------------------------------------------+
| <<Key>>        | <<Default value>> | <<Description>>                                |
*----------------+-------------+------------------------------------------------+
|<<<preload>>> | <<<false>>>    | If set to <<<true>>> forces the reading of all group members when a group is retrieved. Otherwise group members will be read when a first request for user membership will be made |
*----------------+-------------+------------------------------------------------+
|<<<search.countlimit>>> | <<<100>>>    | The number of entries to limit search results to. If the LDAP user search returns more matching entries than specified with this parameter, the first <<<search.countlimit>>> will be returned only. |
*----------------+-------------+------------------------------------------------+
|<<<refferal>>> | <<<ignore>>> | Specifies how referrals encountered by the service provider are to be processed. P�ossible values are <<<follow>>> - follow referrals automatically, <<<ignore>>> - ignore referrals, <<<throw>>> - throw <<<ReferralException>>> when a referral is encountered |
*----------------+-------------+------------------------------------------------+
|<<<ad.range.step>>> | <<<0>>>    | Handle Active Directory range searches when retrieving group members. If set to <<<0>>> all members are retrieved with a single search. If set e.g. to <<<100>>>, searches like <<<range=0-100>>>, <<<range=101-200>>>, <<<range=201-300>>> etc. are used to retrieve all members iteratively. |
*----------------+-------------------+------------------------------------------------+
| <<<search.name>>> | <<<\<none\>>>> | The search base that defines which part of the LDAP directory tree to search, e.g. <<<dc=jahia,dc=com>>>, To improve performance when retrieving the members of groups it is advisable to have a different base between user and group search|
*----------------+-------------------+------------------------------------------------+
| <<<search.attribute>>> | <<<cn>>>          | The name of the attribute that will be used as a user key. |
*----------------+-----------------+------------------------------------------------+
| <<<search.objectclass>>> | <<<groupOfUniqueNames>>>    | The <<<objectClass>>> value for a group object |
*----------------+-----------------+------------------------------------------------+
| <<<search.wildcards.attributes>>>  | <<<cn,description,uniqueMember>>> | A list of attributes to use for wildcard searches such as <*=*test*> |
*----------------+-------------+------------------------------------------------+
| <<<members.attribute>>>  | <<<uniqueMember>>> | The name of the LDAP group object attribute to retrieve membership from |
*----------------+-------------+------------------------------------------------+
| <<<dynamic.enabled>>>  | <<<false>>> | Set to true if you want to use the dynamic groups |
*----------------+-------------+------------------------------------------------+
| <<<dynamic.search.objectclass>>>  | <<<groupOfURLs>>> | The name of the LDAP group object attribute to retrieve dynamic membership from |
*----------------+-------------+------------------------------------------------+
| <<<dynamic.members.attribute>>>  | <<<memberurl>>> | The name of the LDAP group object attribute to retrieve dynamic membership from |
*----------------+-------------+------------------------------------------------+

  [[III]] Attribute mapping parameters - defines a mapping between Jahia's <<<jnt:user>>> node properties and the corresponding LDAP object attributes.
  
*----------------+-------------------+------------------------------------------------+
| <<Key>>        | <<Default value>> | <<Description>>                                |
*----------------+-------------------+------------------------------------------------+
| <<<groupname.attribute.map>>> | <<<cn>>> | Group name |
*----------------+-------------------+------------------------------------------------+
| <<<description.attribute.map>>> | <<<description>>> | Description |
*----------------+-------------+------------------------------------------------+

  Additional attribute mappings can be specified, using the following pattern for the entry key: "<<<\<jahia-group-property-name\>.attribute.map>>>" and the name of the corresponding LDAP object attribute as the value.
  
  []
